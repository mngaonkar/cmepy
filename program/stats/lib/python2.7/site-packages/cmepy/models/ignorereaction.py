
import operator
# From this function I am finding and returning the maximum element/value present inside propensities set.
def maxpropval(propensities):
    maxVal = propensities[0]
    for i in range(0, len(propensities), 1):
        if maxVal < propensities[i]:
            maxVal = propensities[i]
    return maxVal

# From this function I am multiplying the maximum element/value present inside propensities set with the value percent_prop (can be of type 32.5 or 30.00).
def maxproppercent(propensities, percent_prop):
    max_val = maxpropval(propensities)
    max_propen = operator.mul(max_val, percent_prop)
    max_propensity = (max_propen / 100)  # dividing value by 100
    return max_propensity

# From this function I am removing all the values from propensities set which is less than max_propensity and then calculating (k) the how many elements/values
# are removed from propensities and then remove same number of elements from last from newarray and then returning the newarray from this function
def ignorereaction(propensities, newarray, percent_prop):
    Oldlength = len(propensities)
    max_propensity = maxproppercent(propensities, percent_prop)
    for i in propensities:
        if i < (max_propensity):
            propensities.remove(i)
    Newlength = len(propensities)
    k = Oldlength - Newlength
    truncated_new_transitions = newarray[: len(newarray) - k]
    return truncated_new_transitions
    

propensities= [20,83.23,20,10]
percent_prop = 20
newarray = [(0,1), (1,0), (-1, 1), (1,1)]
ans = ignorereaction(propensities, newarray, percent_prop)
print ans    