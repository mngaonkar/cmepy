"""
s_1(*x) = x[0]  # A
s_2(*x) = x[1]  # B
s_3(*x) = x[2]  # C
s_4(*x) = x[3]  # D

    A --k_1--> B
    B --k_2--> C
    B + D --k_3--> B + E

"""
import numpy as np
from model import Model


# propensities
reaction_1 = lambda *x : 1.0 * x[0]
reaction_2 = lambda *x : 1000.0 * x[1]
reaction_3 = lambda *x : 100.0 * x[3] * x[1]

# transitions (A, B, C, D, E)
v_1 = (-1, 1, 0, 0, 0)
v_2 = (0, -1, 1, 0, 0)
v_3 = (0, -1, 0, -1, 1)

# starting state
x_0 = (50,0,0,80,0) # initial populations of the three species.

species_names = ('A','B','C','D','E')

catalytic_model = Model(propensities = [reaction_1,reaction_2,reaction_3], transitions = [v_1,v_2,v_3], initial_state = x_0, species = species_names)

print(catalytic_model.propensities)
print(catalytic_model.transitions)
print(catalytic_model.initial_state)
print(catalytic_model.species)

# inside a propensity
print(catalytic_model.propensities[0](*catalytic_model.initial_state))

from OFSP import OFSP_Solver
OFSP_catalytic = OFSP_Solver(catalytic_model,10,1e-6)

T = np.arange(0,2.0,0.001)
for isp_position in T:
  OFSP_catalytic.step(isp_position)
  OFSP_catalytic.print_stats

  OFSP_catalytic.check_point()

OFSP_catalytic.plot()
OFSP_catalytic.plot_checked()
